<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>TaskJunior</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;800&display=swap" rel="stylesheet"/>
  <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #4f46e5, #9333ea);
      --secondary-gradient: linear-gradient(135deg, #6366f1, #8b5cf6);
      --dark-bg: #0f172a;
      --light-bg: #f8fafc;
      --card-bg: rgba(255, 255, 255, 0.05);
      --text-light: #f8fafc;
      --text-dark: #1e293b;
      --radius: 16px;
      --transition: all 0.3s ease;
    }

    body {
      margin: 0;
      padding: 0;
      font-family: 'Inter', sans-serif;
      background: var(--light-bg);
      color: var(--text-dark);
      transition: var(--transition);
    }

    body.dark-theme {
      background: var(--dark-bg);
      color: var(--text-light);
    }

    .gradient-text {
      font-size: 3rem;
      position: relative;
      padding: 8px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      background: var(--primary-gradient);
      -webkit-text-fill-color: transparent;
    }

    @supports not (-webkit-text-fill-color: transparent) {
      .gradient-text {
        color: #4f46e5;
        background: none;
        text-shadow: 0 0 1px rgba(147, 51, 234, 0.3);
      }
    }

    .gradient-text::before {
      content: "";
      position: absolute;
      top: -5px;
      left: -10px;
      right: -10px;
      bottom: -5px;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      z-index: -1;
      backdrop-filter: blur(2px);
    }

    header {
      padding: 60px 20px 40px;
      text-align: center;
      background: var(--primary-gradient);
      color: white;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 40px 20px;
    }

    .hero {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 40px;
      align-items: center;
      margin-bottom: 80px;
    }

    .hero-content h1 {
      font-size: 3rem;
      line-height: 1.2;
      margin-bottom: 20px;
    }

    .hero-buttons {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      margin-top: 30px;
    }

    .btn {
      padding: 14px 30px;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      text-decoration: none;
      text-align: center;
      background: var(--secondary-gradient);
      color: white;
      box-shadow: 0 8px 20px rgba(147, 51, 234, 0.3);
      transition: var(--transition);
    }

    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 25px rgba(147, 51, 234, 0.4);
    }

    .features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
      margin-bottom: 80px;
    }

    .feature {
      background: rgba(79, 70, 229, 0.05);
      border-radius: var(--radius);
      padding: 30px;
      transition: var(--transition);
      backdrop-filter: blur(10px);
    }

    .feature:hover {
      transform: translateY(-10px);
    }

    .feature-icon {
      width: 40px;
      height: 40px;
      background: var(--secondary-gradient);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
    }

    .feature-icon svg {
      width: 20px;
      height: 20px;
      fill: white;
    }

    .footer {
      background: var(--dark-bg);
      color: #94a3b8;
      padding: 40px 20px;
      text-align: center;
      font-size: 0.9rem;
    }

    .theme-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--secondary-gradient);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: 0 8px 20px rgba(147, 51, 234, 0.4);
      transition: var(--transition);
    }

    .theme-toggle:hover {
      transform: rotate(90deg);
    }

    .theme-toggle svg {
      width: 24px;
      height: 24px;
      fill: white;
    }

    @media (max-width: 768px) {
      .hero {
        grid-template-columns: 1fr;
        text-align: center;
        padding: 40px 20px;
      }

      .hero-content h1 {
        font-size: 2.2rem;
      }

      .feature {
        padding: 20px;
      }
    }
  </style>
</head>
<body id="app">
  <button class="theme-toggle" @click="toggleTheme" aria-label="Переключить тему">
    <svg id="themeIcon" viewBox="0 0 24 24">
      <path :d="isDark ? 
        'M12 17a5 5 0 100-10 5 5 0 000 10zm0 2a7 7 0 110-14 7 7 0 010 14z' : 
        'M12 3a9 9 0 109 9c0-.46-.04-.92-.1-1.36a5.389 5.389 0 01-4.4 2.26 5.403 5.403 0 01-3.14-9.8c-.44-.06-.9-.1-1.36-.1z'"/>
    </svg>
  </button>

  <header>
    <div class="container">
      <img 
        src="/logo.png" 
        alt="TaskJunior Logo" 
        style="width: 120px; height: auto; margin-bottom: 20px;"
      />
      <p class="tagline" style="font-size: 1.2rem; opacity: 0.8;">
        Профессиональное управление проектами для современных команд
      </p>
    </div>
  </header>

  <section class="hero">
    <div class="container hero-content">
      <h1>Организуйте свою работу эффективно с помощью TaskJunior</h1>
      <p style="font-size: 1.1rem; opacity: 0.8;">
        Интуитивно понятный инструмент управления проектами для современных команд
      </p>
      <div class="hero-buttons">
        <a class="btn" href="register.html">Регистрация</a>
        <a class="btn" href="login.html">Вход</a>
      </div>
    </div>
    <div class="container">
      <img 
        src="https://via.placeholder.com/600x400?text=Task+Management" 
        alt="Task Management" 
        style="width: 100%; border-radius: 20px; box-shadow: 0 10px 30px rgba(147, 51, 234, 0.2);"
      />
    </div>
  </section>

  <section class="container">
    <h2 style="text-align: center; margin-bottom: 40px; font-size: 2rem;">Основные возможности</h2>
    <div class="features">
      <div class="feature">
        <div class="feature-icon">
          <svg viewBox="0 0 24 24">
            <path d="M9 5h6a2 2 0 012 2v8a2 2 0 01-2 2H9a2 2 0 01-2-2V7a2 2 0 012-2z"/>
          </svg>
        </div>
        <h3 style="margin-bottom: 15px; color: #4f46e5;">Гибкие доски</h3>
        <p>Создавайте интерактивные доски для управления задачами и проектами</p>
      </div>
      <div class="feature">
        <div class="feature-icon">
          <svg viewBox="0 0 24 24">
            <path d="M17 3H7a2 2 0 00-2 2v14a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2z"/>
          </svg>
        </div>
        <h3 style="margin-bottom: 15px; color: #4f46e5;">Назначение задач</h3>
        <p>Легко распределяйте задачи между членами команды и отслеживайте прогресс</p>
      </div>
      <div class="feature">
        <div class="feature-icon">
          <svg viewBox="0 0 24 24">
            <path d="M12 2a10 10 0 1010 10A10 10 0 0012 2zm0 18a8 8 0 118-8 8 8 0 010 16z"/>
          </svg>
        </div>
        <h3 style="margin-bottom: 15px; color: #4f46e5;">Аналитика</h3>
        <p>Получайте подробную статистику и визуализацию прогресса проектов</p>
      </div>
    </div>
  </section>

  <footer class="footer">
    <p>&copy; 2025 TaskJunior. Все права защищены.</p>
  </footer>

  <script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
          isDark: false
        };
      },
      mounted() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
          this.isDark = true;
          document.body.classList.add('dark-theme');
        }
      },
      methods: {
        toggleTheme() {
          this.isDark = !this.isDark;
          document.body.classList.toggle('dark-theme', this.isDark);
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        }
      }
    }).mount('#app');
  </script>
</body>
</html>
